#version 450

#extension GL_EXT_mesh_shader : require
#extension GL_EXT_buffer_reference : require
#extension GL_EXT_shader_8bit_storage : require
#extension GL_GOOGLE_include_directive : enable

#include "common.h"

layout(buffer_reference, std430) readonly buffer MeshletBuffer{ 
	Meshlet meshlets[];
};
layout(buffer_reference, std430) readonly buffer MeshletVertexBuffer{ 
	uint meshletVertices[];
};
layout(buffer_reference, std430) readonly buffer MeshletTriangleBuffer{ 
	uint8_t meshletTriangles[];
};


layout(buffer_reference, std430) readonly buffer VertexBuffer{ 
	Vertex vertices[];
};
layout(buffer_reference, std430) readonly buffer MaterialBuffer{
	Material materials[];
};
layout(buffer_reference, std430) readonly buffer PointLightBuffer{
	PointLight pointLights[];
};
layout(buffer_reference, std430) readonly buffer DirLightBuffer{
	DirLight dirLights[];
};
layout(buffer_reference, std430) readonly buffer SpotLightBuffer{
	SpotLight spotLights[];
};
layout(buffer_reference, std430) readonly buffer MeshViewBuffer{
	MeshView meshViews[];
};
layout(push_constant, std430) uniform constant
{
	mat4 projView;
	mat4 worldTransform;
	SceneInfo sceneInfo;

	MeshletBuffer meshletBuffer;
	MeshletVertexBuffer meshletVertices;
	MeshletTriangleBuffer meshletTriangles;

	MeshViewBuffer meshViewBuffer;
	VertexBuffer vertexBuffer;
	MaterialBuffer materialBuffer;

	PointLightBuffer pointLightBuffer;
	SpotLightBuffer spotLightBuffer;
	DirLightBuffer dirLightBuffer;
};

struct Payload {
	uint vertexOffset;
	uint triangleOffset;
};
taskPayloadSharedEXT Payload payloadOut;

void main() {
	Meshlet meshlet = meshletBuffer.meshlets[gl_WorkGroupID.x];
	payloadOut.vertexOffset   = meshlet.vertexOffset;
	payloadOut.triangleOffset = meshlet.triangleOffset;

	EmitMeshTasksEXT(meshlet.triangleCount, 1, 1);
}